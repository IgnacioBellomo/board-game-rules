{"version":3,"sources":["logo.svg","components/NavBar.jsx","components/HomePage.jsx","testAPIResults.js","components/BoardGameSearch.jsx","components/BoardGame.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","searchBar","e","setState","searchBarText","target","value","state","length","axios","get","then","theResult","searchBarResults","data","names","clearBar","showSuggestions","map","eachGame","key","className","to","onClick","formSubmition","console","log","history","push","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onSubmit","this","onChange","placeholder","Component","HomePage","grabGame","gameName","x","games","catch","err","BoardGameSearch","gameInfo","match","params","res","theGame","showAllGames","words","replace","split","filter","game","otherWords","name","every","word","includes","src","image_url","gameID","BoardGame","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61c75fab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class NavBar extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchBarText: \"\",\r\n            searchBarResults: null,\r\n        }\r\n    }\r\n\r\n\r\n    searchBar = (e) => {\r\n        this.setState({\r\n            searchBarText: e.target.value,\r\n        }, () => {\r\n            if (this.state.searchBarText.length > 0){\r\n                axios.get(`https://www.boardgameatlas.com/api/game-names?client_id=snrWFZ0nvl&limit=10&name=${this.state.searchBarText}`)\r\n                .then((theResult) => {\r\n                    this.setState({\r\n                        searchBarResults: theResult.data.names,\r\n                    })\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    searchBarResults: null,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // grabGame = (gameName) => {\r\n    //     let x;\r\n    //     let theRoute;\r\n    //     // axios.get(`https://www.boardgameatlas.com/api/search?name=${gameName}&exact=true&client_id=snrWFZ0nvl`)\r\n    //     // .then((res)=>{     \r\n    //     // x = res.data.games[0];\r\n    //     // theRoute = `/games/${x.id}`;\r\n    //     // }, () => {\r\n    //     return <Redirect to={theRoute}\r\n    //     theGame = {x}\r\n    //         />\r\n    //     // })\r\n    //     // .catch((err)=>{\r\n    //     // console.log(err);\r\n    //     // })\r\n    // onClick={() => {this.grabGame(eachGame)}}\r\n    // }\r\n\r\n    clearBar = () => {\r\n        this.setState({\r\n            searchBarText: \"\",\r\n            searchBarResults: null,\r\n        })\r\n    }\r\n\r\n\r\n    showSuggestions = () => {\r\n        return this.state.searchBarResults.map((eachGame) => {\r\n\r\n            return (\r\n                <li key={eachGame} className=\"search-bar-suggestion\" >\r\n                    <Link to = {`/search/${eachGame}`} onClick={this.clearBar}>\r\n                        {eachGame}\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    formSubmition = () => {\r\n        if (this.state.searchBarText.length > 0){\r\n            console.log(this.state.searchBarText);\r\n            this.props.history.push(`/search/${this.state.searchBarText}`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">BGR</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav mr-auto navbar-links\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to = {'/'} className=\"nav-link\">\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">About</a>\r\n                        </li>\r\n                        </ul>\r\n                        <form className=\"form-inline my-2 my-lg-0 search-bar-form\" onSubmit={this.formSubmition}>\r\n                        <input className=\"form-control mr-sm-2 search-bar\" type=\"search\" value={this.state.searchBarText} onChange={this.searchBar} placeholder=\"Search for a game\" aria-label=\"Search\"/>\r\n                        {this.state.searchBarResults &&\r\n                            <div className=\"auto-complete\">\r\n                            <ul>\r\n                                {this.showSuggestions()}\r\n                            </ul>\r\n                        </div>\r\n                        }\r\n                        \r\n                        <button className=\"btn btn-outline-dark my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                    </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport NavBar from './NavBar';\r\n\r\nexport default class HomePage extends Component {\r\n    \r\n\r\n    grabGame = (gameName) => {\r\n        axios.get(`https://www.boardgameatlas.com/api/search?name=${gameName}&exact=true&client_id=snrWFZ0nvl`)\r\n        .then((theResult)=>{     \r\n        let x = theResult.data;\r\n        this.setState({games: x})\r\n        })\r\n        .catch((err)=>{\r\n        console.log(err);\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"homepage-banner\">\r\n                </div>\r\n                <div className=\"jumbotron\">\r\n                        <h1>Rulebooks for everyone.</h1>\r\n                        <p>Don't pass the book, send the link!</p>      \r\n                </div>\r\n                <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1>No rulebooks added yet :(</h1>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        recent add\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        recent add\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        recent add\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport React, { Component } from 'react'\r\n\r\nexport default class TestAPIResults extends Component {\r\n    render() {\r\n        axios.post('https://ironrest.herokuapp.com/createCollection/ignacio').then(res => {\r\n            console.log(res)\r\n        })\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { throwStatement } from '@babel/types';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class BoardGameSearch extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            theGame: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.gameInfo();\r\n    }\r\n\r\n    shouldComponentUpdate(props){\r\n        if (this.props !== props){\r\n            console.log(props.match.params.id);\r\n            axios.get(`https://www.boardgameatlas.com/api/search?name=${props.match.params.id}&client_id=snrWFZ0nvl`)\r\n            .then((res) => {\r\n                this.setState({theGame: res.data.games})\r\n            })\r\n        }\r\n        return true\r\n    }\r\n    \r\n    gameInfo = () => {\r\n        axios.get(`https://www.boardgameatlas.com/api/search?name=${this.props.match.params.id}&client_id=snrWFZ0nvl`)\r\n        .then((res) => {\r\n            console.log(res);\r\n            this.setState({theGame: res.data.games})\r\n        })\r\n    }\r\n\r\n    showAllGames = () => {\r\n        let words = this.props.match.params.id.replace(/[&\\/\\\\#,+()$~%.'\":*?<>{}]/g, '').split(\" \");\r\n        let newGames = this.state.theGame.filter((game) => {\r\n            let otherWords = game.name.replace(/[&\\/\\\\#,+()$~%.'\":*?<>{}]/g, '').split(\" \");\r\n            if (!words.every(word => otherWords.includes(word))){\r\n                console.log(game);\r\n            }\r\n            return words.every(word => otherWords.includes(word))\r\n        }).map((game) => {\r\n            return (\r\n                <div className=\"col-4 single-boardgame\">\r\n                    <img src={game.image_url} />\r\n                    <Link to={`/${game.name}`} gameID={game.id}>\r\n                        <h3>{game.name}</h3>\r\n                    </Link>\r\n                </div>\r\n            )\r\n\r\n        }) \r\n        return newGames\r\n    }\r\n\r\n    render() {\r\n        if (this.state.theGame) {\r\n            return (\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {this.showAllGames()}\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n            <div>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n            )\r\n        }      \r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class BoardGame extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                yellow\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePage from './components/HomePage';\nimport TestAPIResults from './testAPIResults';\nimport {Switch, Route} from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport BoardGameSearch from './components/BoardGameSearch';\nimport BoardGame from './components/BoardGame';\n\nfunction App() {\n\n  let boardGameClientID = 'snrWFZ0nvl';\n\n  console.log('test');\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <Switch>\n        <Route exact path=\"/\" render = {()=>\n        <HomePage/>}/>\n\n        <Route exact path=\"/search/:id\" render = {(props)=>\n        <BoardGameSearch\n          {...props}\n        />}/>\n\n        <Route exact path=\"/:id\" render = {(props) => \n        <BoardGame \n          {...props}\n          />}/>\n\n      </Switch>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}